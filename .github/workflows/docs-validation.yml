name: Documentation Validation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - 'README.md'
      - '.github/workflows/docs-validation.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'README.md'
      - '.github/workflows/docs-validation.yml'

jobs:
  # 文档结构验证
  docs-structure:
    name: Documentation Structure Validation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate documentation structure
      run: |
        echo "🔍 Validating documentation structure..."
        
        # 检查必需的文档目录
        required_dirs=(
          "docs"
          "docs/api"
          "docs/guides"
          "docs/development"
          "docs/reports"
        )
        
        missing_dirs=()
        for dir in "${required_dirs[@]}"; do
          if [ ! -d "$dir" ]; then
            missing_dirs+=("$dir")
          fi
        done
        
        if [ ${#missing_dirs[@]} -ne 0 ]; then
          echo "❌ Missing required directories:"
          printf '%s\n' "${missing_dirs[@]}"
          exit 1
        fi
        
        # 检查必需的文档文件
        required_docs=(
          "docs/index.md"
          "docs/api/reference.md"
          "docs/api/configuration.md"
          "docs/guides/examples.md"
          "docs/guides/testing.md"
          "docs/guides/monitoring.md"
          "docs/guides/troubleshooting.md"
          "docs/development/architecture.md"
          "docs/development/contributing.md"
          "docs/development/quality.md"
          "docs/development/changelog.md"
        )
        
        missing_docs=()
        for doc in "${required_docs[@]}"; do
          if [ ! -f "$doc" ]; then
            missing_docs+=("$doc")
          fi
        done
        
        if [ ${#missing_docs[@]} -ne 0 ]; then
          echo "❌ Missing required documentation files:"
          printf '%s\n' "${missing_docs[@]}"
          exit 1
        fi
        
        echo "✅ All required documentation files and directories are present"

    - name: Check documentation links
      run: |
        echo "🔗 Checking documentation links..."
        
        # 检查 README.md 中的链接
        echo "Checking README.md links..."
        
        # 提取所有 markdown 链接
        grep -oE '\[.*\]\([^)]+\)' README.md | while read -r link; do
          # 提取链接路径
          path=$(echo "$link" | sed -n 's/.*(\([^)]*\)).*/\1/p')
          
          # 跳过外部链接和锚点链接
          if [[ "$path" =~ ^https?:// ]] || [[ "$path" =~ ^# ]]; then
            continue
          fi
          
          # 检查文件是否存在
          if [ ! -f "$path" ] && [ ! -d "$path" ]; then
            echo "❌ Broken link in README.md: $link -> $path"
            exit 1
          fi
        done
        
        echo "✅ All documentation links are valid"

    - name: Validate markdown syntax
      uses: DavidAnson/markdownlint-cli2-action@v13
      with:
        globs: |
          README.md
          docs/**/*.md

  # 文档内容质量检查
  docs-quality:
    name: Documentation Quality Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check documentation completeness
      run: |
        echo "📋 Checking documentation completeness..."
        
        # 检查 API 文档是否包含所有主要功能
        api_keywords=(
          "NewMySQLBatchSQL"
          "NewPostgreSQLBatchSQL"
          "NewSQLiteBatchSQL"
          "NewRedisBatchSQL"
          "WithMetricsReporter"
          "Schema"
          "Request"
          "ConflictStrategy"
        )
        
        for keyword in "${api_keywords[@]}"; do
          if ! grep -r "$keyword" docs/api/ > /dev/null; then
            echo "⚠️ API keyword '$keyword' not found in API documentation"
          fi
        done
        
        # 检查示例文档是否包含所有数据库类型
        db_types=("MySQL" "PostgreSQL" "SQLite" "Redis")
        for db in "${db_types[@]}"; do
          if ! grep -i "$db" docs/guides/examples.md > /dev/null; then
            echo "⚠️ Database type '$db' not found in examples documentation"
          fi
        done
        
        echo "✅ Documentation completeness check completed"

    - name: Check for outdated information
      run: |
        echo "🕐 Checking for potentially outdated information..."
        
        # 检查是否有硬编码的版本号需要更新
        if grep -r "v1\.[0-9]\.[0-9]" docs/ README.md | grep -v "example\|示例"; then
          echo "⚠️ Found hardcoded version numbers that may need updating"
        fi
        
        # 检查是否有过时的 Go 版本引用
        if grep -r "go 1\.[0-9][0-9]" docs/ README.md | grep -v "1.23"; then
          echo "⚠️ Found references to old Go versions"
        fi
        
        echo "✅ Outdated information check completed"

  # 监控系统文档验证
  monitoring-docs:
    name: Monitoring Documentation Validation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate monitoring configuration files
      run: |
        echo "📊 Validating monitoring configuration files..."
        
        # 检查 Grafana 配置文件
        grafana_configs=(
          "test/integration/grafana/provisioning/dashboards/batchsql-performance.json"
          "test/integration/grafana/provisioning/datasources/prometheus.yml"
        )
        
        for config in "${grafana_configs[@]}"; do
          if [ ! -f "$config" ]; then
            echo "❌ Missing Grafana configuration: $config"
            exit 1
          fi
        done
        
        # 检查 Prometheus 配置
        if [ ! -f "test/integration/grafana/prometheus.yml" ]; then
          echo "❌ Missing Prometheus configuration"
          exit 1
        fi
        
        # 检查监控脚本
        if [ ! -f "scripts/start-monitoring.sh" ]; then
          echo "❌ Missing monitoring startup script"
          exit 1
        fi
        
        echo "✅ All monitoring configuration files are present"

    - name: Validate monitoring documentation
      run: |
        echo "📖 Validating monitoring documentation..."
        
        # 检查监控指南是否包含必要信息
        monitoring_keywords=(
          "Prometheus"
          "Grafana"
          "localhost:3000"
          "localhost:9090"
          "数据完整性"
          "RPS"
          "响应时间"
        )
        
        for keyword in "${monitoring_keywords[@]}"; do
          if ! grep -i "$keyword" docs/guides/monitoring.md > /dev/null; then
            echo "⚠️ Monitoring keyword '$keyword' not found in monitoring guide"
          fi
        done
        
        echo "✅ Monitoring documentation validation completed"

  # 生成文档报告
  docs-report:
    name: Generate Documentation Report
    runs-on: ubuntu-latest
    needs: [docs-structure, docs-quality, monitoring-docs]
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate documentation report
      run: |
        echo "# Documentation Validation Report" > docs_report.md
        echo "" >> docs_report.md
        echo "Generated on: $(date -u)" >> docs_report.md
        echo "" >> docs_report.md
        
        echo "## Validation Results" >> docs_report.md
        echo "" >> docs_report.md
        
        if [ "${{ needs.docs-structure.result }}" == "success" ]; then
          echo "✅ **Documentation Structure**: All required files and directories are present" >> docs_report.md
        else
          echo "❌ **Documentation Structure**: Missing required files or directories" >> docs_report.md
        fi
        
        if [ "${{ needs.docs-quality.result }}" == "success" ]; then
          echo "✅ **Documentation Quality**: Content completeness check passed" >> docs_report.md
        else
          echo "❌ **Documentation Quality**: Content quality issues found" >> docs_report.md
        fi
        
        if [ "${{ needs.monitoring-docs.result }}" == "success" ]; then
          echo "✅ **Monitoring Documentation**: All monitoring configs and docs are valid" >> docs_report.md
        else
          echo "❌ **Monitoring Documentation**: Monitoring documentation issues found" >> docs_report.md
        fi
        
        echo "" >> docs_report.md
        echo "## Documentation Statistics" >> docs_report.md
        echo "" >> docs_report.md
        echo "- **Total Markdown Files**: $(find . -name '*.md' | wc -l)" >> docs_report.md
        echo "- **Documentation Files**: $(find docs/ -name '*.md' | wc -l)" >> docs_report.md
        echo "- **API Documentation Files**: $(find docs/api/ -name '*.md' | wc -l)" >> docs_report.md
        echo "- **Guide Files**: $(find docs/guides/ -name '*.md' | wc -l)" >> docs_report.md
        echo "- **Development Documentation**: $(find docs/development/ -name '*.md' | wc -l)" >> docs_report.md
        echo "" >> docs_report.md
        echo "## Recommendations" >> docs_report.md
        echo "- Keep documentation up to date with code changes" >> docs_report.md
        echo "- Regularly review and update version references" >> docs_report.md
        echo "- Ensure all new features have corresponding documentation" >> docs_report.md

    - name: Upload documentation report
      uses: actions/upload-artifact@v3
      with:
        name: documentation-validation-report
        path: docs_report.md
        retention-days: 30

    - name: Comment PR with documentation status
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('docs_report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 📚 Documentation Validation Results\n\n${report}`
          });